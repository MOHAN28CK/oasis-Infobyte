#PROJECT 5 - HOUSE PRICE PREDICTING (LINEAR REGRESSION)

import pandas as pd

# Load the dataset
df = pd.read_csv("D:\\Housing.csv")

print(df.shape)  # (rows, columns)

print(df.head())  # Display the first few rows

print(df.columns)

print(df.dtypes)

print(df.describe())

print(df['bedrooms'].value_counts())

# Drop rows with any missing values
df_clean = df.dropna()

print(df.duplicated().sum())  # Count duplicates
df.drop_duplicates(inplace=True)  # Remove duplicates

import matplotlib.pyplot as plt

df['bedrooms'].hist()
plt.title('Histogram of bedrooms')
plt.xlabel('Value')
plt.ylabel('Frequency')
plt.show()

# Check data types of columns
print(df.dtypes)

# Convert 'yes' and 'no' to numeric values (e.g., 1 and 0)
df['mainroad'] = df['mainroad'].map({'yes': 1, 'no': 0})
# Convert 'yes' and 'no' to numeric values (e.g., 1 and 0)
df['guestroom'] = df['guestroom'].map({'yes': 1, 'no': 0})
# Convert 'yes' and 'no' to numeric values (e.g., 1 and 0)
df['basement'] = df['basement'].map({'yes': 1, 'no': 0})
# Convert 'yes' and 'no' to numeric values (e.g., 1 and 0)
df['hotwaterheating'] = df['hotwaterheating'].map({'yes': 1, 'no': 0})
# Convert 'yes' and 'no' to numeric values (e.g., 1 and 0)
df['airconditioning'] = df['airconditioning'].map({'yes': 1, 'no': 0})
# Convert 'yes' and 'no' to numeric values (e.g., 1 and 0)
df['prefarea'] = df['prefarea'].map({'yes': 1, 'no': 0})
# Convert 'yes' and 'no' to numeric values (e.g., 1 and 0)
df['furnishingstatus'] = df['furnishingstatus'].map({'yes': 1, 'no': 0})


# Check for missing values
print(df.isnull().sum())

import seaborn as sns
import matplotlib.pyplot as plt

# Compute correlation matrix
corr_matrix = df.corr()

# Plot heatmap
sns.heatmap(corr_matrix, annot=True, cmap='coolwarm')
plt.title('Correlation Matrix')
plt.show()

# Correlation matrix
corr_matrix = df.corr()
print(corr_matrix)

# Visualize the correlation matrix
plt.figure(figsize=(10, 8))
sns.heatmap(corr_matrix, annot=True, cmap='coolwarm')
plt.show()

# Select features based on correlation with the target variable
target = 'price'  # Replace with your target variable
correlation_threshold = 0.5
relevant_features = corr_matrix[target][abs(corr_matrix[target]) > correlation_threshold].index.tolist()
relevant_features.remove(target)
print(f"Selected features: {relevant_features}")

from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score# Split the data into features and target
X = df[relevant_features]
y = df[target]

# Split the data into training and test sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Initialize and train the linear regression model
model = LinearRegression()
model.fit(X_train, y_train)

# Make predictions on the test set
y_pred = model.predict(X_test)

# Calculate evaluation metrics
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

print(f"Mean Squared Error: {mse}")
print(f"R-squared: {r2}")

# Plot the predicted vs actual values
plt.figure(figsize=(10, 6))
plt.scatter(y_test, y_pred, alpha=0.7)
plt.xlabel('Actual Values')
plt.ylabel('Predicted Values')
plt.title('Actual vs Predicted Values')
plt.plot([y.min(), y.max()], [y.min(), y.max()], color='red', linestyle='--')
plt.show()
